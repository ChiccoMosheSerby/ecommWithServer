{"version":3,"file":"static/js/905.8dd323dc.chunk.js","mappings":"2NAGaA,EAAc,mCAAG,sGACVC,MAAM,GAAD,OAHb,GAGa,aAAoB,CACzCC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAJgB,cACtBC,EADsB,gBAQTA,EAAIC,OARK,YAQtBC,EARsB,QASnBC,OAAOC,OATY,uBAU1BC,QAAQC,MAAM,uBAAwBJ,EAAKC,QAVjB,mDAcrBD,EAAKK,UAdgB,4CAAH,qDAmBdC,EAAc,mCAAG,WAAOC,GAAP,yFACVZ,MAAM,GAAD,OAtBb,GAsBa,qBAAoBY,GAAa,CACtDX,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAJgB,cACtBC,EADsB,gBAQTA,EAAIC,OARK,YAQtBC,EARsB,QASnBC,OAAOC,OATY,uBAU1BC,QAAQC,MAAM,uBAAwBJ,EAAKC,QAVjB,mDAarBD,EAAKQ,SAbgB,4CAAH,sDAkBdC,EAAgB,mCAAG,WAAOC,GAAP,yFACZf,MAAM,GAAD,OAxCb,GAwCa,aAAoB,CACzCgB,OAAQ,OACRf,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBe,KAAMC,KAAKC,UAAU,CAAEJ,KAAI,OAAKA,OAPJ,cACxBZ,EADwB,gBASXA,EAAIC,OATO,cASxBC,EATwB,yBAWvBA,EAAKK,UAXkB,2CAAH,uD,iKCtChBU,E,OAAqBC,GAAAA,IAAH,0C,kBCa/BC,EAAAA,GAAAA,SACEC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,IAcF,IAoDA,EApDkB,SAAC,GAAsB,EAArBC,MAAqB,EAAbC,OAAc,IAChCC,GAAOC,EAAAA,EAAAA,KAAPD,GAER,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOvB,EAAP,KAAiBwB,EAAjB,KACA,GAAkCD,EAAAA,EAAAA,UAAS,IAA3C,eAAOE,EAAP,KAAmBC,EAAnB,KACA,GAAgCH,EAAAA,EAAAA,UAAS,IAAzC,eAAOI,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,qGACoBzB,EAAAA,EAAAA,IAAiBiB,GADrC,OACQ5B,EADR,OAEEK,QAAQgC,IAAI,MAAOrC,GAEnB+B,EAAY/B,GAJd,4CADc,uBAAC,WAAD,wBAOdsC,KACC,CAACV,KAEJQ,EAAAA,EAAAA,YAAU,WACR,IAAMF,EA7BV,SAAwB3B,EAAU0B,GAChC,IAAMD,GAAU,OAAO,IAAIO,IAAIhC,EAASiC,KAAI,SAAC9B,GAAD,OAAaA,EAAQ+B,cAEjE,OADAR,EAAYD,GACLA,EAAWU,QAAO,SAACC,EAAKF,GAC7B,IAAMG,EAAYrC,EAASsC,QACzB,SAACnC,GAAD,OAAaA,EAAQ+B,WAAaA,KAEpC,MAAM,GAAN,eAAWE,GAAX,CAAgB,CAAEF,SAAUA,EAAUlC,SAAUqC,OAC/C,IAqBgBE,CAAevC,EAAU0B,GAC1CE,EAAYD,KACX,CAAC3B,IACJ,IAAML,EAAO,CACX6C,OAAQf,EAAWQ,KAAI,SAACQ,GAAD,OAASA,KAChCC,SAAU,CACR,CACEC,MAAO,WACPhD,KAAMgC,EAASM,KAAI,SAACQ,GAAD,OAASA,EAAIzC,SAASH,UACzC+C,YAAa,CAAC,2BACdC,gBAAiBlB,EAASM,KACxB,SAACQ,GAAD,iBAAaK,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,WAYnE,OACE,+BAEE,SAACvC,EAAD,WACE,SAAC,KAAD,CAAKf,KAAMA,EAAMuD,QAXP,CACdC,MAAO,CACLC,SAAS,EACTC,KAAM","sources":["api/products.js","components/Charts/BarsChart/styles.js","components/Charts/BarsChart/BarsChart.jsx"],"sourcesContent":["// const url = \"http://localhost:2001\";\r\nconst url = \"\";\r\n\r\nexport const getAllProducts = async () => {\r\n  const res = await fetch(`${url}/products`, {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  });\r\n  // const data = await res.json()\r\n  const data = await res.json();\r\n  if (data.errors.length) {\r\n    console.error(\"getAllProducts ERROR\", data.errors);\r\n\r\n    return;\r\n  }\r\n  return data.products;\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const getProductById = async (productId) => {\r\n  const res = await fetch(`${url}/products/${productId}`, {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  });\r\n\r\n  const data = await res.json();\r\n  if (data.errors.length) {\r\n    console.error(\"getProductById ERROR\", data.errors);\r\n    return;\r\n  }\r\n  return data.product;\r\n};\r\n\r\n////////////////////////////////////////////////////////////\r\n\r\nexport const getProductsByIDs = async (ids) => {\r\n  const res = await fetch(`${url}/products`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ ids: [...ids] }),\r\n  });\r\n  const data = await res.json();\r\n\r\n  return data.products;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const BarsChartContainer = styled.div`\r\n  display: flex;\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar,Doughnut } from \"react-chartjs-2\";\r\nimport { getProductsByIDs } from \"../../../api/products\";\r\nimport { BarsChartContainer } from \"./styles\";\r\nimport { useShoppingCartStore } from \"../../../store/shoopingCartStore\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nfunction formatProducts(products, setCegories) {\r\n  const categories = [...new Set(products.map((product) => product.category))];\r\n  setCegories(categories);\r\n  return categories.reduce((acc, category) => {\r\n    const _products = products.filter(\r\n      (product) => product.category === category\r\n    );\r\n    return [...acc, { category: category, products: _products }];\r\n  }, []);\r\n}\r\n\r\nconst BarsChart = ({width , heigth }) => {\r\n  const { sc } = useShoppingCartStore();\r\n\r\n  const [products, setProducts] = useState([]);\r\n  const [categories, setCegories] = useState([]);\r\n  const [formated, setFormated] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await getProductsByIDs(sc);\r\n      console.log(\"res\", res);\r\n\r\n      setProducts(res);\r\n    }\r\n    fetchData();\r\n  }, [sc]);\r\n\r\n  useEffect(() => {\r\n    const formated = formatProducts(products, setCegories);\r\n    setFormated(formated);\r\n  }, [products]);\r\n  const data = {\r\n    labels: categories.map((cat) => cat),\r\n    datasets: [\r\n      {\r\n        label: \"Products\",\r\n        data: formated.map((cat) => cat.products.length),\r\n        borderColor: [\"rgba(255, 206, 86, 0.2)\"],\r\n        backgroundColor: formated.map(\r\n          (cat) => `#${Math.floor(Math.random() * 16777215).toString(16)}`\r\n        ),\r\n      },\r\n    ],\r\n  };\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: \"Your Shopping Cart Products By Categories\",\r\n    },\r\n\r\n  };\r\n  return (\r\n    <>\r\n      {/* <h1>Your Shopping Cart Products By Categories</h1> */}\r\n      <BarsChartContainer>\r\n        <Bar data={data} options={options} />\r\n        {/* <Doughnut data={data} options={options} /> */}\r\n      </BarsChartContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarsChart;\r\n"],"names":["getAllProducts","fetch","headers","Accept","res","json","data","errors","length","console","error","products","getProductById","productId","product","getProductsByIDs","ids","method","body","JSON","stringify","BarsChartContainer","styled","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","width","heigth","sc","useShoppingCartStore","useState","setProducts","categories","setCegories","formated","setFormated","useEffect","log","fetchData","Set","map","category","reduce","acc","_products","filter","formatProducts","labels","cat","datasets","label","borderColor","backgroundColor","Math","floor","random","toString","options","title","display","text"],"sourceRoot":""}